{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/App.module.css","components/ContactForm/ContactForm.module.css","components/redux/action.js","components/redux/operations.js","components/redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","components/redux/reducer.js","components/redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","addFilter","axios","defaults","baseURL","dispatch","a","get","responce","data","contact","post","id","delete","getFilter","state","filter","getContacts","contacts","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","number","handleChange","target","value","setState","handleSubmit","e","preventDefault","acc","props","forEach","el","toLocaleLowerCase","alert","addContact","reset","this","fetchContact","onSubmit","className","styles","contactForm","type","pattern","title","required","onChange","React","Component","connect","operations","isLoading","isRequested","deleteContact","contactList__header","contactList","map","onClick","mapDispatchToProps","filter__header","filter__input","App","headers","createReducer","_","action","payload","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,eAAiB,+BAA+B,cAAgB,gC,mBCAlHD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,oBAAsB,2C,mBCAvFD,EAAOC,QAAU,CAAC,QAAU,uB,mBCA5BD,EAAOC,QAAU,CAAC,YAAc,mC,+MCCnBC,EAAsBC,YAAa,uBACnCC,EAAsBD,YAAa,uBACnCE,EAAoBF,YAAa,qBAEjCG,EAAoBH,YAAa,qBACjCI,EAAoBJ,YAAa,qBACjCK,EAAkBL,YAAa,mBAE/BM,EAAuBN,YAAa,wBACpCO,EAAuBP,YAAa,wBACpCQ,EAAqBR,YAAa,sBAElCS,EAAYT,YAAa,aCDtCU,IAAMC,SAASC,QAAU,wBAEzB,I,MAgCe,EAhCM,yDAAM,WAAMC,GAAN,eAAAC,EAAA,6DACzBD,EAASd,KADgB,kBAIAW,IAAMK,IAAI,aAJV,OAIjBC,EAJiB,OAKvBH,EAASZ,EAAoBe,EAASC,OALf,gDAOvBJ,EAASX,EAAkB,EAAD,KAPH,yDAAN,uDAgCN,EArBI,SAAAgB,GAAO,8CAAI,WAAML,GAAN,eAAAC,EAAA,6DAC5BD,EAASV,KADmB,kBAIHO,IAAMS,KAAK,YAAaD,GAJrB,OAIpBF,EAJoB,OAK1BH,EAAST,EAAkBY,EAASC,OALV,gDAO1BJ,EAASR,EAAgB,EAAD,KAPE,yDAAJ,uDAqBX,EAVO,SAAAe,GAAE,8CAAI,WAAMP,GAAN,SAAAC,EAAA,6DAC1BD,EAASP,KADiB,kBAGlBI,IAAMW,OAAN,oBAA0BD,IAHR,OAIxBP,EAASN,EAAqBa,IAJN,gDAMxBP,EAASL,EAAmB,EAAD,KANH,yDAAJ,uD,QCnCXc,EAAY,SAAAC,GAAK,OAAIA,EAAMC,QAC3BC,EAAc,SAAAF,GAAK,OAAIA,EAAMG,UAC7BC,EAAqBC,YAAe,CAACN,EAAWG,IAAc,SAACD,EAAQE,GAClF,IAAMG,EAAmBL,EAAOM,cAChC,OAAOJ,EAASF,QAAO,SAAAN,GAAO,OAAIA,EAAQa,KAAKD,cAAcE,SAASH,S,OCClEI,E,4MAMJV,MAAQ,CACNQ,KAAM,GACNG,OAAQ,I,EAOVC,aAAe,YAAkC,IAAD,IAA9BC,OAAUL,EAAoB,EAApBA,KAAMM,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,IAAIC,GAAM,EAEV,EAAKC,MAAMjB,SAASkB,SAAQ,SAAAC,GAAE,OAAIA,EAAGd,KAAKe,sBAAwB,EAAKvB,MAAMQ,KAAKe,sBAAwBJ,GAAM,MAEhHA,EAAMK,MAAM,GAAD,OAAI,EAAKxB,MAAMQ,KAAf,4BAAgD,EAAKY,MAAMK,WAAW,EAAKzB,OACtF,EAAK0B,S,EAGPA,MAAQ,WACN,EAAKX,SAAS,CAAEP,KAAM,GAAIG,OAAQ,M,uDApBpC,WACEgB,KAAKP,MAAMQ,iB,oBAsBb,WACE,MAAyBD,KAAK3B,MAAtBQ,EAAR,EAAQA,KAAMG,EAAd,EAAcA,OACd,OACE,uBAAMkB,SAAUF,KAAKX,aAAcc,UAAWC,IAAOC,YAArD,UACE,yCAEE,uBACEC,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRtB,MAAON,EACP6B,SAAUV,KAAKf,kBAInB,2CAEE,uBACEqB,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRtB,MAAOH,EACP0B,SAAUV,KAAKf,kBAInB,wBAAQqB,KAAK,SAAb,qE,GAhEkBK,IAAMC,WA+EjBC,eATS,SAAAxC,GACtB,MAAO,CAAEG,SAAUD,EAAYF,OAGN,SAAAV,GAAQ,MAAK,CACtCmC,WAAY,SAAA9B,GAAO,OAAIL,EAASmD,EAAsB9C,KACtDiC,aAAc,kBAAMtC,EAASmD,SAGhBD,CAA6C9B,G,iBCzC7C8B,eARS,SAAAxC,GACtB,MAAO,CAAEG,SAAUC,EAAmBJ,GAAQ0C,UAAW1C,EAAM2C,gBAGtC,SAAArD,GAAQ,MAAK,CACtCsD,cAAe,SAAA/C,GAAE,OAAIP,EAASmD,EAAyB5C,QAG1C2C,EAtCK,SAAC,GAA4C,IAA1CrC,EAAyC,EAAzCA,SAAUuC,EAA+B,EAA/BA,UAAWE,EAAoB,EAApBA,cAC1C,OACE,qCACGF,GAAa,oBAAIZ,UAAWC,IAAOc,oBAAtB,wEACd,oBAAIf,UAAWC,IAAOe,YAAtB,SACG3C,EAAS4C,KAAI,SAAAzB,GAAE,OACd,+BACGA,EAAGd,KADN,KACcc,EAAGX,OACf,wBAAQsB,KAAK,SAASzB,KAAMc,EAAGzB,GAAImD,QAAS,kBAAMJ,EAActB,EAAGzB,KAAnE,sBAFOyB,EAAGzB,e,iBCoBhBoD,EAAqB,CACzB/D,aAGasD,eARS,SAAAxC,GACtB,MAAO,CAAEc,MAAOf,EAAUC,MAOYiD,EAAzBT,EA9BA,SAAC,GAA0B,IAAxB1B,EAAuB,EAAvBA,MAAO5B,EAAgB,EAAhBA,UACvB,OACE,sBAAK4C,UAAWC,IAAO9B,OAAvB,UACE,oBAAI6B,UAAWC,IAAOmB,eAAtB,mCACA,uBACEjB,KAAK,OACLzB,KAAK,SACL0B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRtB,MAAOA,EACPuB,SAAU,SAAApB,GAAC,OAAI/B,EAAU+B,EAAEJ,OAAOC,QAClCgB,UAAWC,IAAOoB,sB,iBCEXC,E,4JAbb,WACE,OACE,qCACE,oBAAItB,UAAWC,IAAOsB,QAAtB,uBACA,cAAC,EAAD,IACA,oBAAIvB,UAAWC,IAAOsB,QAAtB,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GARUf,IAAMC,W,2DCQlBpC,GAAWmD,YAAc,IAAD,mBAC3B5E,GAAsB,SAAC6E,EAAGC,GAAJ,OAAeA,EAAOC,WADjB,cAG3B5E,GAAoB,SAACmB,EAAOwD,GAAR,6BAAuBxD,GAAvB,CAA8BwD,EAAOC,aAH9B,cAI3BzE,GAAuB,SAACgB,EAAOwD,GAAR,OAAmBxD,EAAMC,QAAO,SAAAqB,GAAE,OAAIA,EAAGzB,KAAO2D,EAAOC,cAJnD,IAOxBd,GAAcW,aAAc,GAAD,mBAC9B9E,GAAsB,kBAAM,KADE,cAE9BE,GAAsB,kBAAM,KAFE,cAG9BC,GAAoB,kBAAM,KAHI,cAI9BC,GAAoB,kBAAM,KAJI,cAK9BC,GAAoB,kBAAM,KALI,cAM9BC,GAAkB,kBAAM,KANM,cAO9BC,GAAuB,kBAAM,KAPC,cAQ9BC,GAAuB,kBAAM,KARC,cAS9BC,GAAqB,kBAAM,KATG,IAY3BgB,GAASqD,YAAc,GAAD,eACzBpE,GAAY,SAACqE,EAAGC,GAAJ,OAAeA,EAAOC,YAG/BC,GAAQJ,YAAc,IAAD,mBACxB3E,GAAoB,SAAC4E,EAAGC,GAAJ,OAAeA,EAAOC,WADlB,cAExB3E,GAAkB,SAACyE,EAAGC,GAAJ,OAAeA,EAAOC,WAFhB,cAGxBxE,GAAqB,SAACsE,EAAGC,GAAJ,OAAeA,EAAOC,WAHnB,IAMZE,gBAAgB,CAC7BxD,YACAwC,eACA1C,UACAyD,WC3CIE,GAAU,uBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAQaC,GALDC,YAAe,CAC3BC,QAASA,GACTb,gBCRFc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.e20fcba8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__lpGvx\",\"filter__header\":\"Filter_filter__header__1FObQ\",\"filter__input\":\"Filter_filter__input__1e7Do\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1IwRu\",\"contactList__header\":\"ContactList_contactList__header__2gVDJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headers\":\"App_headers__jp6Tj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__2ZlMz\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"addContactRequest\");\r\nexport const addContactSuccess = createAction(\"addContactSuccess\");\r\nexport const addContactError = createAction(\"addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\"deleteContactRequest\");\r\nexport const deleteContactSuccess = createAction(\"deleteContactSuccess\");\r\nexport const deleteContactError = createAction(\"deleteContactError\");\r\n\r\nexport const addFilter = createAction(\"addFilter\");\r\n","import axios from \"axios\";\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError\r\n} from \"./action\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContact = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const responce = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactSuccess(responce.data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const responce = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactSuccess(responce.data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport default { fetchContact, addContact, deleteContact };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getFilter = state => state.filter;\r\nexport const getContacts = state => state.contacts;\r\nexport const getVisibleContacts = createSelector([getFilter, getContacts], (filter, contacts) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport operations from \"../redux/operations.js\";\r\nimport { getContacts } from \"../redux/selectors\";\r\n\r\nclass ContactForm extends React.Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    fetchContact: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContact();\r\n  }\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    let acc = false;\r\n\r\n    this.props.contacts.forEach(el => el.name.toLocaleLowerCase() === this.state.name.toLocaleLowerCase() && (acc = true));\r\n\r\n    acc ? alert(`${this.state.name} is already in contacts`) : this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Добавить</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { contacts: getContacts(state) };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: contact => dispatch(operations.addContact(contact)),\r\n  fetchContact: () => dispatch(operations.fetchContact())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport operations from \"../redux/operations\";\r\nimport { getVisibleContacts } from \"../redux/selectors\";\r\n\r\nconst ContactList = ({ contacts, isLoading, deleteContact }) => {\r\n  return (\r\n    <>\r\n      {isLoading && <h2 className={styles.contactList__header}>Загружаем....</h2>}\r\n      <ul className={styles.contactList}>\r\n        {contacts.map(el => (\r\n          <li key={el.id}>\r\n            {el.name}: {el.number}\r\n            <button type=\"button\" name={el.id} onClick={() => deleteContact(el.id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  isLoading: PropTypes.bool,\r\n  deleteContact: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { contacts: getVisibleContacts(state), isLoading: state.isRequested };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(operations.deleteContact(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { addFilter } from \"../redux/action\";\r\nimport { getFilter } from \"../redux/selectors\";\r\n\r\nconst Filter = ({ value, addFilter }) => {\r\n  return (\r\n    <div className={styles.filter}>\r\n      <h3 className={styles.filter__header}>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={value}\r\n        onChange={e => addFilter(e.target.value)}\r\n        className={styles.filter__input}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  addFilter: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { value: getFilter(state) };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addFilter\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\n\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport styles from \"./App.module.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2 className={styles.headers}>Phonebook</h2>\r\n        <ContactForm />\r\n        <h2 className={styles.headers}>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  addFilter\r\n} from \"./action\";\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactSuccess]: (_, action) => action.payload,\r\n\r\n  [addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [deleteContactSuccess]: (state, action) => state.filter(el => el.id !== action.payload)\r\n});\r\n\r\nconst isRequested = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [addFilter]: (_, action) => action.payload\r\n});\r\n\r\nconst error = createReducer(\"\", {\r\n  [fetchContactError]: (_, action) => action.payload,\r\n  [addContactError]: (_, action) => action.payload,\r\n  [deleteContactError]: (_, action) => action.payload\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  isRequested,\r\n  filter,\r\n  error\r\n});\r\n\r\n//Error записал, в принципе есть он есть мы можем его выводить в соответсвующем компоненте.. но уже 02:42.... оставлю до лучших времен\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }),\r\n  logger\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: reducer,\r\n  middleware\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport store from \"./components/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}